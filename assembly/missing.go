package assembly

import (
	"database/sql"

	"github.com/ionous/iffy/dbutil"
)

// MissingKinds returns named kinds which don't have a defined ancestry.
func MissingKinds(db *sql.DB, cb func(string) error) error {
	var k string
	return dbutil.QueryAll(db,
		`select distinct name from eph_named n
		where n.category = 'kind'
		and not exists (
			select 1 from mdl_kind a
			where n.name = a.kind
		)`,
		func() error { return cb(k) },
		&k)
}

// MissingFields returns named fields which don't have a defined property.
func MissingFields(db *sql.DB, cb func(string) error) error {
	var k string
	return dbutil.QueryAll(db,
		`select distinct n.name from eph_named n
		where n.category = 'field'
		and not exists (
			select 1 from mdl_field p
			where n.name = p.field
		)`,
		func() error { return cb(k) },
		&k)
}

//
func MissingTraits(db *sql.DB, cb func(string) error) error {
	var k string
	return dbutil.QueryAll(db,
		`select distinct n.name from eph_named n
		where n.category = 'trait'
		and not exists (
			select 1 from mdl_aspect r
			where n.name = r.trait
		)`,
		func() error { return cb(k) },
		&k)
}

//
func MissingAspects(db *sql.DB, cb func(string) error) error {
	var k string
	return dbutil.QueryAll(db,
		`select distinct n.name from eph_named n
		where n.category = 'aspect'
		and not exists (
			select 1 from mdl_aspect r
			where n.name = r.aspect
		)`,
		func() error { return cb(k) },
		&k)
}

// MissingDefaults returns named kind,field pairs which dont exist paired together
func MissingDefaults(db *sql.DB, cb func(kind, field string) error) error {
	var k, f string
	// fix? we probably want to generate src
	return dbutil.QueryAll(db,
		`select en.kind, en.field
		/* for now, walk from eph_default to user friendly kind, field */
		from asm_default en 
		join asm_default_tree ep
		on en.idEphDefault = ep.idEphDefault
		/* for every set of kinds generated by eph_default,
		   choose sets where no kind,field paring was found */
		group by ep.idEphDefault having max( exists (
			select 1 from mdl_field f
			where f.rowid = ep.idModelField
		) )  = 0`,
		func() error { return cb(k, f) },
		&k, &f)
}
