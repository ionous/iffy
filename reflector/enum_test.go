package reflector

import (
	"fmt"
	"github.com/stretchr/testify/assert"
	r "reflect"
	"strings"
	"testing"
)

// TriState provides an enum with three choices for testing.
// it implements stringer.
type TriState int

const (
	No TriState = iota
	Yes
	Maybe
)

// TooLongState simulates an enum with an infinite number of values.
type TooLongState int

func (i TooLongState) String() string {
	return "repeats"
}

// EmptyState provides an enum with choices, but without stringer.
type EmptyState int

const (
	NotEmpty EmptyState = iota
)

// Code generated by "stringer -type=TriState"; DO NOT EDIT
// Note: stringer doesnt seem to run on test files:
// "stringer: no values defined for type TriState"
const _TriState_name = "NoYesMaybe"

var _TriState_index = [...]uint8{0, 2, 5, 10}

func (i TriState) String() string {
	if i < 0 || i >= TriState(len(_TriState_index)-1) {
		return fmt.Sprintf("TriState(%d)", i)
	}
	return _TriState_name[_TriState_index[i]:_TriState_index[i+1]]
}

// TestEnumChoices to verify a stringerified enum generates good choices.
func TestEnumChoices(t *testing.T) {
	assert := assert.New(t)
	rtype := r.TypeOf((*TriState)(nil)).Elem()
	if enum, e := MakeEnum(rtype); assert.NoError(e, "enum should generate") {
		var reduce []string
		for _, c := range enum {
			reduce = append(reduce, c.Name())
		}
		assert.EqualValues(_TriState_name, strings.Join(reduce, ""))
		assert.EqualValues(0, enum.ChoiceToIndex("No"))
		assert.EqualValues(-1, enum.ChoiceToIndex("Never"))
		assert.EqualValues("Maybe", enum.IndexToChoice(2).Name())
		assert.EqualValues("$maybe", enum.IndexToChoice(2).Id())
		assert.Empty(enum.IndexToChoice(7).IsValid())
		assert.Empty(enum.IndexToChoice(-1).IsValid())
	}
}

// TestEnumEmpty to verify an empty enum is an error.
func TestEnumEmpty(t *testing.T) {
	assert := assert.New(t)
	rtype := r.TypeOf((*EmptyState)(nil)).Elem()
	_, e := MakeEnum(rtype)
	assert.Error(e, "enum shouldnt generate")
}

// TestEnumTooLong to verify an enum with too many choices is an error.
func TestEnumTooLong(t *testing.T) {
	assert := assert.New(t)
	rtype := r.TypeOf((*TooLongState)(nil)).Elem()
	_, e := MakeEnum(rtype)
	assert.Error(e, "enum shouldnt generate")
}
