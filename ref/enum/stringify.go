package enum

import (
	"github.com/ionous/errutil"
	r "reflect"
	"strings"
)

// Stringify returns a list of strings generated by go:generate stringer
func Stringify(rtype r.Type) (ret []string, err error) {
	type Stringer interface {
		String() string
	}
	if rtype.Kind() != r.Int {
		err = errutil.New("type is not indexed", rtype)
	} else {
		// create an instance we can muck with
		v := r.New(rtype).Elem()
		finished := false
		for i := int64(0); i < 64; i++ {
			v.SetInt(i)
			// note: ask for the interface each time b/c the value, v, changes.
			if stringer, ok := v.Interface().(Stringer); !ok {
				err = errutil.New("enum has no strings. generate via stringer?", rtype)
				break
			} else {
				s := stringer.String()
				if strings.ContainsRune(s, '(') {
					finished = true
					break
				} else {
					ret = append(ret, s)
				}
			}
		}
		if !finished {
			err = errutil.New("enum end not found after", len(ret), "choices", rtype)
		} else if len(ret) == 0 {
			err = errutil.New("enum is empty", rtype)
		}
	}
	return
}
